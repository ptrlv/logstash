input {
  file {
    path => ['/var/log/messages', '/var/log/cron', '/var/log/secure']
    type => "syslog"
  }
}

filter {
  if [type] == "syslog" {
    grok {
      match => [ "message",  "%{SYSLOGBASE2} %{GREEDYDATA:syslog_message}" ]
      add_field => [ "received_at", "%{@timestamp}" ]
      add_field => [ "received_from", "%{host}" ]
      break_on_match => false
    }
    grok {
      match => [ "syslog_message", "Accepted %{WORD:auth_method} for %{USER:username} from %{IP:src_ip} port %{INT:src_port} ssh2" ]
      match => [ "syslog_message", "Failed %{WORD:auth_method} for %{USER:username} from %{IP:src_ip} port %{INT:src_port} ssh2" ]
      match => [ "syslog_message", "Failed %{WORD:auth_method} for invalid user %{USER:username} from %{IP:src_ip} port %{INT:src_port} ssh2" ]
      match => [ "syslog_message", "error retrieving information about user %{USER:username}" ]
      match => [ "syslog_message", "Invalid user %{USER:username} from %{IP:src_ip}" ]
      match => [ "syslog_message", "Received disconnect from %{IP:src_ip}: 11: disconnected by user" ]
      match => [ "syslog_message", "session opened for user %{USER:username}" ]
      match => [ "syslog_message", "session closed for user %{USER:username}" ]
      match => [ "syslog_message", "\(%{USER:username}\) CMD \(%{DATA:cronscript}\)" ]
      break_on_match => false
    }
    date {
      match => [ "timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss", "d HH:mm:ss", "dd HH:mm:ss" ]
    }
    mutate {
      add_field => { "src_host" => "%{src_ip}" }
    }
    dns {
      action => "replace"
      reverse => [ "src_host" ]
    }
  }
}

output {
  redis {
    host => "py-adm"
    data_type => "list"
    key => "logstash"
  }
}
